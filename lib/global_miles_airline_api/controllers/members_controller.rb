# global_miles_airline_api
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module GlobalMilesAirlineApi
  # MembersController
  class MembersController < BaseController
    @instance = MembersController.new

    class << self
      attr_accessor :instance
    end

    def instance
      self.class.instance
    end

    # This endpoint allows to recommend a new member to airlines.
    # @param [NewMemberRequest] body Required parameter: The body of the
    # request.
    # @return NewMemberResponse response from the API call
    def create_recommend_a_new_member(body)
      # Prepare query url.
      _path_url = '/v1/airline/members/'
      _query_builder = Configuration.get_base_uri
      _query_builder << _path_url
      _query_url = APIHelper.clean_url _query_builder
      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }
      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      _context = execute_request(_request)
      validate_response(_context)
      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      NewMemberResponse.from_hash(decoded)
    end

    # This endpoint allows to search a member on the airline system.
    # @param [MemberSearchRequest] body Required parameter: The body of the
    # request.
    # @return MemberSearchResponse response from the API call
    def create_member_search(body)
      # Prepare query url.
      _path_url = '/v1/airline/members/actions/search'
      _query_builder = Configuration.get_base_uri
      _query_builder << _path_url
      _query_url = APIHelper.clean_url _query_builder
      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }
      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      _context = execute_request(_request)
      validate_response(_context)
      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      MemberSearchResponse.from_hash(decoded)
    end
  end
end
