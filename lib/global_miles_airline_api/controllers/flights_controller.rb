# global_miles_airline_api
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module GlobalMilesAirlineApi
  # FlightsController
  class FlightsController < BaseController
    @instance = FlightsController.new

    class << self
      attr_accessor :instance
    end

    def instance
      self.class.instance
    end

    # This endpoint allows to search the status of flight.
    # @param [FlightStatusRequest] body Required parameter: The body of the
    # request.
    # @return FlightStatusResponse response from the API call
    def create_flight_status(body)
      # Prepare query url.
      _path_url = '/v1/airline/flights/actions/status'
      _query_builder = Configuration.get_base_uri
      _query_builder << _path_url
      _query_url = APIHelper.clean_url _query_builder
      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }
      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      _context = execute_request(_request)
      validate_response(_context)
      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      FlightStatusResponse.from_hash(decoded)
    end

    # This endpoint allows to create a flight on the system and defines the
    # mileage rules for the passenger.
    # @param [FlightCreateRequest] body Required parameter: The body of the
    # request.
    # @return Response response from the API call
    def create_flight_creation(body)
      # Prepare query url.
      _path_url = '/v1/airline/flights'
      _query_builder = Configuration.get_base_uri
      _query_builder << _path_url
      _query_url = APIHelper.clean_url _query_builder
      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }
      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      _context = execute_request(_request)
      validate_response(_context)
      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      Response.from_hash(decoded)
    end
  end
end
